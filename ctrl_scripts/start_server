#!/usr/local/bin/perl

=head1 NAME

start_server - script to start an Ensembl server

=head1 SYNOPSIS

    ctrl_scripts/start_server [-rXh]

=head1 DESCRIPTION

This script starts up an Ensembl server. Available options are:

    - delete conf/config.packed before start
    - start Apache in single server mode

Run 'ctrl_script/start_server --help' for usage details.

=head1 LICENSE

Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=head1 AUTHOR

Patrick Meidl <pm2@sanger.ac.uk>

=head1 CONTACT

Post questions to the EnsEMBL development list dev@ensembl.org

=cut

use strict;
use warnings;
no warnings 'uninitialized';

use FindBin qw($Bin);
use File::Basename qw(dirname);
use POSIX qw(strftime);
use Getopt::Long;

my ($help, $rmconfig, $single, $flush, @defines);
my $serverroot;

BEGIN {
  $serverroot = dirname($Bin);
  unshift @INC, "$serverroot/conf";
};

use SiteDefs;

## Walk through the plugin tree and see if there's 'ctrl_scripts/*' in there
## any files starting with 00_start* to 49_start* will be executed before apache
## any files starting with 50_start* to 99_start* will be executed after
## same thing happens with stop_server
## all scripts must be perl scripts, as they are 'required'

my @start_before;
my @start_after;
my @plugins = reverse @{$SiteDefs::ENSEMBL_PLUGINS || []};

while(my ($dir, $name) = splice @plugins, 0, 2) {
  $dir = "$dir/ctrl_scripts";
  
  if (opendir(DIR, $dir)) {
    my @files = readdir(DIR);
    push @start_before, map "$dir/$_", grep /^[0-4]?[0-9]_start/, @files;
    push @start_after,  map "$dir/$_", grep /^[5-9][0-9]_start/,  @files;
    closedir DIR;
  }
}

@start_before = sort @start_before;
@start_after  = sort @start_after;

my $confdir = 'conf';

&GetOptions(
  "confdir=s" => \$confdir,
  "rmconfig"  => \$rmconfig,
  "r"         => \$rmconfig,
  "flush"     => \$flush,
  "f"         => \$flush,
  "X"         => \$single,
  "single"    => \$single,
  "help"      => \$help,
  "h"         => \$help,
  "D=s"       => \@defines,
);

warn "
==============================================================================
 Starting server with configurations from $confdir
";

if ($help) {
  print qq(
	Usage:
    ctrl_scripts/start_server
      [-r|--rmconfig]
      [-f|--flush]
      [-X|--single]
      [-h|--help]
        
Options:
  -r, --rmconfig  : remove conf/config.packed before restarting the server and flush memcached
	-f, --flush     : flush memcached storage!
  -X, --single    : start Apache in single server mode
  -h, --help      : print this help message
);

  exit;
}

if ($SiteDefs::ENSEMBL_CTRLLOG && open(LOG, ">>$SiteDefs::ENSEMBL_CTRLLOG")) {
  print LOG sprintf "%s [001] attempt server start (manual invocation)\n", strftime("%Y-%m-%d %H:%M:%S", localtime);
  close LOG; 
}

if (! -e "$SiteDefs::ENSEMBL_CONF_DIRS[0]/packed") {
  warn " Creating directory for packed files at $SiteDefs::ENSEMBL_CONF_DIRS[0]/packed\n";
  system("mkdir -p $SiteDefs::ENSEMBL_CONF_DIRS[0]/packed");
}

if ($SiteDefs::ENSEMBL_JSCSS_TYPE && ! -e "$SiteDefs::ENSEMBL_WEBROOT/htdocs/$SiteDefs::ENSEMBL_JSCSS_TYPE") {
  warn " Creating directory for compress js and css at $SiteDefs::ENSEMBL_WEBROOT/htdocs/$SiteDefs::ENSEMBL_JSCSS_TYPE\n";
  system("mkdir -p $SiteDefs::ENSEMBL_WEBROOT/htdocs/$SiteDefs::ENSEMBL_JSCSS_TYPE");
}

if ($rmconfig) {
  warn " Removing config.packed...\n";
  
  my $ok = unlink "$serverroot/$confdir/config.packed";
  
  if ($ok) {
    warn " Removed config.packed....\n";
  } else {
    warn " Could not delete $serverroot/$confdir/config.packed: $!\n[WARN] Starting with old config.packed!\n";
  }
}

## Check memcached servers version
warn " Checking memcached compatibility...\n";

my $res = system("$serverroot/ctrl_scripts/memcached version");

if ($res >> 8 > 0) {
  die " failed\nPlease check www.ensembl.org/info/docs/webcode/mirror/memcached\n";
}

if ($flush || $rmconfig) {
  # Flush memcached
  my $cmd = "$serverroot/ctrl_scripts/memcached flush_all";
  my @res = `$cmd`; chomp @res;
  
  warn " Flushed memcached entries for this server (@res)\n";
}

warn "==============================================================================\n";

my $cmd = '';

if($SiteDefs::APACHE_DEFINE) {
  push @defines,grep { /\S/ } split(' ',$SiteDefs::APACHE_DEFINE);
}
my $defines = join(' ',map { "-D$_" } @defines);

my $exe     =  defined ($SiteDefs::APACHE_BIN) ? $SiteDefs::APACHE_BIN : ($SiteDefs::APACHE_DIR . '/bin/httpd');
   $cmd    .= "$exe -d $SiteDefs::APACHE_DIR -f $serverroot/$confdir/httpd.conf $defines" . ($single ? ' -X' : '');

if ($single) {
  require $_ for @start_before;
  require $_ for @start_after; # Better than not at all?
  warn "About to exec: $cmd\n";
  exec("$cmd");
  die " Could not start server: $!.\n[FATAL] Server start failed.\n";
} else {
  require $_ for @start_before;
  
  system("$cmd") == 0 or die " Could not start server: $!.\n[FATAL] Server start failed.\n";

  require $_ for @start_after;
}

if ($SiteDefs::ENSEMBL_CTRLLOG && open(LOG, ">>$SiteDefs::ENSEMBL_CTRLLOG")) {
  print LOG sprintf "%s [002] server started (manual invocation)\n", strftime("%Y-%m-%d %H:%M:%S", localtime);
  close LOG; 
}

